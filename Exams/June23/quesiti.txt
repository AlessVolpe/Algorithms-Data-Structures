2.1)
i | Cluster                       | Arco aggiunto (w)
1 | [(7,6)]                       | 7 -- 6 (1)
2 | [(7,6,5)]                     | 6 -- 5 (2)
3 | [(7,6,5), (8,2)]              | 8 -- 2 (2)
4 | [(7,6,5), (8,2), (0,1)]       | 0 -- 1 (4)
5 | [(7,6,5), (8,2,3), (0,1)]     | 2 -- 3 (7)
6 | [((7,6,5), (8,2,3,4), (0,1))] | 3 -- 4 (9)

2.2)
i) Per la cancellazione di una chiave scambiamo l'ultimo elemento dello heap, in questo caso 
il nodo con chiave 11 con la radice del sottoalbero, radicato nell'elemento che vogliamo cancellare.
       7                     11                    11 
   8      11   ---->    8         7   ---->     8     null     
12   14              12   14                 12   14 

Quindi per ristabilire l'ordine nello heap eseguiamo downheap sul nodo con chiave k = 11,
seguendo un cammino discendente finchè non troviamo un nodo con figli di chiave > k. 
ii) L'albero finale sarà:
                    6
       8                         20   
   11     null               22      30
12    14

3.1)
Considerando che l'algoritmo PQ-Sort è formato da due cicli while indipendenti:
- Il primo ciclo esegue Q.insert(), che aggiungendo in testa un elemento alla PQ, viene
eseguito in tempo unitario;
- Il secondo ciclo esegue Q.removeMin(), che rimuovendo l'elemnto della PQ con chiave minore, 
ha costo asitotico nel caso peggiore di O(n) (caso peggiore:elemento con chiave minore in coda alla PQ).
=> T(n) = n(1) + n(n) = n + n^2 => O(T(n)) = O(n^2 + n) => O(n^2) 
(Nel calcolo asintotico di una somma ci interessa sempre l'addendo con coefficiente maggiore).

3.2)
i) L'obiettivo del problema dell'ordinamento topologico per grafi diretti è quello di trovare un ordine lineare 
dei nodi del grafo tale che, per ogni arco diretto da un nodo A ad un nodo B, nell'ordinamento venga prima A di B;
quindi che nell'ordinamento i nodi che hanno archi entranti da un nodo u vengano dopo del suddetto nodo.

ii) Possiamo, però, enunciare il seguente teorema: un digrafo ammette un ordinamento topologico se e solo se è un DAG (Directed Acyclic Graph).
Possiamo provarlo, considerando, un algoritmo che risolve il problema di Topological Sort (un possibile algoritmo è
un estensione di DFS) e mostrando che, se (u,v) è un arco, u.rank < v.rank. 
Una DFS distingue gli archi in quattro categorie:
- Arco cross, è un semplice arco di attraversamento;
- Arco tree, viene specificato quando esiste un sottografo minimamente connesso e collegato da un e un solo percorso;
- Arco forward, arco uscente che scopre un nuovo nodo, quindi continua la DFS;
- Arco back, arco uscente che connette ad un nodo già scoperto, formando quindi un ciclo.

Quindi abbiamo:
- Se (u,v) è un arco di tipo cross (considerando topologicalDFS), allora significa che l'algoritmo è stato completato 
prima per v che per u => v.rank > rank.u;
- se, (u,v) è un arco tree o forward, v è un discendente (diretto se arco tree) di u e quindi è visitato prima di
quest'ultimo, quindi anche in questo caso rank.v > rank.u;
Poiché in topologicalDFS i nodi raggiungibili (e non esplorati) da un vertice considerato ricevono un numero topologico
più alto di quel vertice, nel caso della presenza di un arco back ci troveremo davanti ad un assurdo: dato il seguente ciclo
con nodi u, v, w e archi (u,v), (v,w) e (w,u)(:= arco back), notiamo che w ha come nodo uscente u che ha rank inferiore, quindi
un grafo ciclico non ammette ordinamento topologico => Se un grago diretto ammette un ordinamento topologico,allora questo è
privo di cicli.