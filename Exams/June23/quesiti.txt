2.1)
i | Cluster                       | Arco aggiunto (w)
1 | [(7,6)]                       | 7 -- 6 (1)
2 | [(7,6,5)]                     | 6 -- 5 (2)
3 | [(7,6,5), (8,2)]              | 8 -- 2 (2)
4 | [(7,6,5), (8,2), (0,1)]       | 0 -- 1 (4)
5 | [(7,6,5), (8,2,3), (0,1)]     | 2 -- 3 (7)
6 | [((7,6,5), (8,2,3,4), (0,1))] | 3 -- 4 (9)

2.2)
i) Per la cancellazione di una chiave scambiamo l'ultimo elemento dello heap, in questo caso 
il nodo con chiave 11 con la radice del sottoalbero, radicato nell'elemento che vogliamo cancellare.
       7                     11                    11 
   8      11   ---->    8         7   ---->     8     null     
12   14              12   14                 12   14 

Quindi per ristabilire l'ordine nello heap eseguiamo downheap sul nodo con chiave k = 11,
seguendo un cammino discendente finchè non troviamo un nodo con figli di chiave > k. 
ii) L'albero finale sarà:
                    6
       8                         20   
   11     null               22      30
12    14

3.1)
Considerando che l'algoritmo PQ-Sort è formato da due cicli while indipendenti:
- Il primo ciclo esegue Q.insert(), che aggiungendo in testa un elemento alla PQ, viene
eseguito in tempo unitario;
- Il secondo ciclo esegue Q.removeMin(), che rimuovendo l'elemnto della PQ con chiave minore, 
ha costo asitotico nel caso peggiore di O(n) (caso peggiore:elemento con chiave minore in coda alla PQ).
=> T(n) = n(1) + n(n) = n + n^2 => O(T(n)) = O(n^2 + n) => O(n^2) 
(Nel calcolo asintotico di una somma ci interessa sempre l'addendo con coefficiente maggiore).

3.2)
